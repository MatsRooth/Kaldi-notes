========== Phonetic dictionaries =========
* s5/data/local/dict/lexicon.txt   Phonetic dictionary
ANYBODY         eh n iy b ah dx iy 
APALACHICOLA    ae p ax l ae td ch ax k ow l ax 
APALACHICOLA+S  ae p ax l ae td ch ax k ow l ax z 
APRIL           ey p r el

* s5/data/local/lang/phone_map.txt Key to positional spelling.

ay ay_B ay_E ay_I ay_S 
b b_B b_E b_I b_S 
ch ch_B ch_E ch_I ch_S 
d d_B d_E d_I d_S

eh_B eh at word beginning
eh_E eh at word end
eh_I word internally
eh_S eh in single-phone word

* s5/data/local/lang/lexiconp_disambig.txt Phonetic dictionary in the positional spelling.

ANYBODY 1.0     eh_B n_I iy_I b_I ah_I dx_I iy_E
APALACHICOLA    1.0     ae_B p_I ax_I l_I ae_I td_I ch_I ax_I k_I ow_I l_I ax_E
APALACHICOLA+S  1.0     ae_B p_I ax_I l_I ae_I td_I ch_I ax_I k_I ow_I l_I ax_I z_E
APRIL   1.0     ey_B p_I r_I el_E

A       1.0     ax_S


========== Data files =========
Illustrated with data/test_mar87.  Many files have utterance IDs in the first column.

* Utt -> Transcript
Matss-MacBook-Pro-2:test_mar87 Mats$ head -5 text   
awf05_st0014_mar87 WHAT+S THE MERCURY+S AVERAGE CRUISING SPEED
awf05_st0101_mar87 WHAT IS THE ETA AT HER DESTINATION OF FANNING
awf05_st0186_mar87 HOW SOON CAN ESTEEM CHOP TO ATLANTIC FLEET
awf05_st0261_mar87 ARE THERE NO SHIPS THAT ARE IN THE MOZAMBIQUE CHANNEL
awf05_st0344_mar87 DRAW A CHART OF ROSS SEA

* Utt -> Speaker
Matss-MacBook-Pro-2:test_mar87 Mats$ head -5 utt2spk  
awf05_st0014_mar87 awf0
awf05_st0101_mar87 awf0
awf05_st0186_mar87 awf0
awf05_st0261_mar87 awf0
awf05_st0344_mar87 awf0

* Utt -> extended pathname of mfcc
Matss-MacBook-Pro-2:test_mar87 Mats$ head -5 feats.scp  
awf05_st0014_mar87 /projects/speech/data/rm_mfcc/raw_mfcc_test_mar87.1.ark:19
awf05_st0101_mar87 /projects/speech/data/rm_mfcc/raw_mfcc_test_mar87.1.ark:3257
awf05_st0186_mar87 /projects/speech/data/rm_mfcc/raw_mfcc_test_mar87.1.ark:7132
awf05_st0261_mar87 /projects/speech/data/rm_mfcc/raw_mfcc_test_mar87.1.ark:11124
awf05_st0344_mar87 /projects/speech/data/rm_mfcc/raw_mfcc_test_mar87.1.ark:14713

* Utt -> launch pipe for wav file
Matss-MacBook-Pro-2:test_mar87 Mats$ head -5 wav.scp   
awf05_st0014_mar87 /projects/speech/sys/kaldi-trunk/egs/rm/s5/../../../tools/sph2pipe_v2.5/sph2pipe -f wav /projects/speech/data/LDC1993S3A/package/rm_comp/rm1_audio2/2_4_2/rm1/ind/dev_aug/awf0_5/st0014.sph |
awf05_st0101_mar87 /projects/speech/sys/kaldi-trunk/egs/rm/s5/../../../tools/sph2pipe_v2.5/sph2pipe -f wav /projects/speech/data/LDC1993S3A/package/rm_comp/rm1_audio2/2_4_2/rm1/ind/dev_aug/awf0_5/st0101.sph |
awf05_st0186_mar87 /projects/speech/sys/kaldi-trunk/egs/rm/s5/../../../tools/sph2pipe_v2.5/sph2pipe -f wav /projects/speech/data/LDC1993S3A/package/rm_comp/rm1_audio2/2_4_2/rm1/ind/dev_aug/awf0_5/st0186.sph |
awf05_st0261_mar87 /projects/speech/sys/kaldi-trunk/egs/rm/s5/../../../tools/sph2pipe_v2.5/sph2pipe -f wav /projects/speech/data/LDC1993S3A/package/rm_comp/rm1_audio2/2_4_2/rm1/ind/dev_aug/awf0_5/st0261.sph |
awf05_st0344_mar87 /projects/speech/sys/kaldi-trunk/egs/rm/s5/../../../tools/sph2pipe_v2.5/sph2pipe -f wav /projects/speech/data/LDC1993S3A/package/rm_comp/rm1_audio2/2_4_2/rm1/ind/dev_aug/awf0_5/st0344.sph |

* Speaker -> something
Matss-MacBook-Pro-2:test_mar87 Mats$ head -5 cmvn.scp
awf0 /projects/speech/data/rm_mfcc/cmvn_test_mar87.ark:5
bcg1 /projects/speech/data/rm_mfcc/cmvn_test_mar87.ark:249
bth0 /projects/speech/data/rm_mfcc/cmvn_test_mar87.ark:493
ctt0 /projects/speech/data/rm_mfcc/cmvn_test_mar87.ark:737
dab0 /projects/speech/data/rm_mfcc/cmvn_test_mar87.ark:981

* Speaker -> Gender
awf0 f
bcg1 f
bth0 m
ctt0 m
dab0 m

* Speaker -> list[Utterance]
Matss-MacBook-Pro-2:test_mar87 Mats$ head -2 spk2utt
awf0 awf05_st0014_mar87 awf05_st0101_mar87 awf05_st0186_mar87 awf05_st0261_mar87 awf05_st0344_mar87 awf05_st0424_mar87 awf05_st0501_mar87 awf05_st0583_mar87 awf05_st0653_mar87 awf05_st0714_mar87
bcg1 bcg18_st0767_mar87 bcg18_st0850_mar87 bcg18_st0906_mar87 bcg18_st0972_mar87 bcg18_st1059_mar87 bcg18_st1100_mar87 bcg18_st1182_mar87 bcg18_st1275_mar87 bcg18_st1337_mar87 bcg18_st1407_mar87

======= MFCC =====
echo $MFCC
 /projects/speech/data/rm_mfcc

$MFCC/raw_mfcc_train.1.scp | tail -1
  adg04_sr049_trn /projects/speech/data/rm_mfcc/raw_mfcc_train.1.ark:5994
  Utterance       Ark with offset (designates mfcc for that utterance)

* Scp and Ark of 5 utterances and their MFCC

head -5 $MFCC/raw_mfcc_train.1.scp                                   
adg04_sr009_trn /projects/speech/data/rm_mfcc/raw_mfcc_train.1.ark:16
adg04_sr049_trn /projects/speech/data/rm_mfcc/raw_mfcc_train.1.ark:5994
adg04_sr089_trn /projects/speech/data/rm_mfcc/raw_mfcc_train.1.ark:9606
adg04_sr129_trn /projects/speech/data/rm_mfcc/raw_mfcc_train.1.ark:12945
adg04_sr169_trn /projects/speech/data/rm_mfcc/raw_mfcc_train.1.ark:16479

* Write as text
head -5 $MFCC/raw_mfcc_train.1.scp |  copy-feats scp:- ark,t:- 2> /dev/null | head -3 
adg04_sr009_trn  [
  39.32669 -22.3271 -9.609714 -21.09854 -21.80154 -18.91736 -13.53936 -12.86063 -8.893347 -15.4877 -9.135353 9.085604 0.4513092 
  37.94971 -21.64114 -2.205398 -11.76025 -15.07053 -25.34395 -13.53936 -6.797929 -4.954507 -10.96573 -5.934509 2.729522 2.924454

head -5 $MFCC/raw_mfcc_train.1.scp |  copy-feats scp:- ark,t:- 2> /dev/null | tail -3 
  39.16271 -21.26787 -5.597891 -16.89856 -16.72086 -2.493165 -0.2224692 -15.56238 1.252913 -5.717055 -7.377578 5.352074 -8.093246 
  37.78496 -25.445 -9.158547 -18.303 -19.54431 -5.790434 -0.2224692 -11.69642 -3.718649 -6.430306 -5.98978 -6.947596 -3.048199 
  37.78496 -22.44153 -6.652901 -16.09603 -13.12006 -4.377318 3.851282 -1.964868 -8.119261 -16.84378 -8.487816 -1.597475 -7.714868 ]

Five keys with matrix values are printed.  There are 13 columns, representing MFCC vectors.

* Put the five in an Ark and read it.

head -5 $MFCC/raw_mfcc_train.1.scp |  copy-feats scp:- ark:- 2> /dev/null > foo.ark

copy-feats ark:foo.ark ark,t:- 2> /dev/null | head -3
adg04_sr009_trn  [
  39.32669 -22.3271 -9.609714 -21.09854 -21.80154 -18.91736 -13.53936 -12.86063 -8.893347 -15.4877 -9.135353 9.085604 0.4513092 
  37.94971 -21.64114 -2.205398 -11.76025 -15.07053 -25.34395 -13.53936 -6.797929 -4.954507 -10.96573 -5.934509 2.729522 2.924454

* Segment

copy-feats ark:foo.ark ark,t:- 2> /dev/null | tr ' ' '\n' | egrep ad | awk '{printf("%s-start %s 1 6\n",$1,$1)}' > foo.seg
cat foo.seg
adg04_sr009_trn-start adg04_sr009_trn 1 6
adg04_sr049_trn-start adg04_sr049_trn 1 6
adg04_sr089_trn-start adg04_sr089_trn 1 6
adg04_sr129_trn-start adg04_sr129_trn 1 6
adg04_sr169_trn-start adg04_sr169_trn 1 6

Extract and name first five rows of each utterance, representing them with names.

extract-rows foo.seg ark:foo.ark ark,t:- 
adg04_sr009_trn-start  [
  37.94971 -21.64114 -2.205398 -11.76025 -15.07053 -25.34395 -13.53936 -6.797929 -4.954507 -10.96573 -5.934509 2.729522 2.924454 
  36.02194 -25.26277 -3.330359 -11.42068 -11.13043 -18.29543 -1.682365 4.11517 5.721625 -17.98257 -13.52169 -9.142942 -4.371323 
  35.74655 -27.6113 -4.376917 -13.7977 -13.92134 -21.19776 -9.822989 6.850285 8.065596 -5.196327 -1.664018 -1.205195 1.687881 
  35.74655 -27.6113 -3.853638 -8.873873 0.9613754 -17.88081 -11.59269 3.333709 -1.924629 1.163749 -2.198167 1.518839 10.88931 
    35.74655 -28.78556 -2.637058 -7.85515 -10.30958 -12.49076 -6.106617 -7.741016 -8.438866 -17.98257 -5.46031 3.940204 0.8222809 ]
adg04_sr049_trn-start  [
  37.85288 -24.00187 -3.977666 -10.56361 -14.475 -17.57341 -1.598482 -1.433131 -7.6197 -7.01965 -5.708654 -1.940364 4.936322 
  36.23806 -25.45159 -3.396778 -11.39135 -15.42818 -20.42363 -17.30712 -4.881397 -3.417396 -0.08356439 -3.386446 -5.499214 -2.293142 
  35.83436 -28.4916 -2.670668 -7.749313 -4.784285 -5.497211 -3.34973 -6.41396 -3.117231 2.680324 -0.1845543 -2.94657 1.265053 
  34.21954 -27.14292 1.436631 -5.266108 7.389706 6.177101 8.325256 2.071891 -5.218384 -9.578561 -3.231632 -21.6971 -8.494569 
  34.21954 -30.6552 -3.687222 -11.72244 0.02158283 0.6179048 -1.598482 -9.734512 -5.218384 -5.740194 -7.876047 -12.09304 -1.276515 ]
adg04_sr089_trn-start  [
  42.574 -19.19589 -13.98044 -14.02386 -18.65869 -25.7052 -21.51119 -5.436452 0.1424717 -19.4595 -13.90276 -6.908226 1.92008 
  42.574 -17.4246 -11.02565 -14.4215 -15.09406 -16.97908 -13.4939 -13.15368 -13.21142 -21.89376 -15.79428 -2.58207 3.189089 
  40.82911 -21.22022 -14.44698 -19.39191 -11.52943 -14.18672 -7.598831 -1.788307 -1.565075 -12.74199 -15.79428 -7.103874 9.11113 
  39.08421 -19.70197 -3.405415 -13.2286 -10.7373 -16.80456 -15.85193 -9.505537 -3.228838 -15.42084 -4.402687 0.2007802 0.04508305 
  37.33931 -21.97934 -3.094383 -13.62623 -4.636991 -7.882839 -1.232157 0.3163929 -11.6863 -16.93497 -22.00913 -2.929927 4.035094 ]
adg04_sr129_trn-start  [
  36.36825 -24.9921 -1.228467 -14.69149 -15.74906 -27.45359 -9.78583 -5.673912 -7.058981 -14.78082 -7.167556 2.131515 -1.577129 
  33.96894 -30.41169 -4.851895 -9.384912 -11.24715 -22.67661 -12.8648 -4.619101 -2.907437 -14.9224 -10.73843 -2.927826 1.596519 
  32.94067 -33.03721 -6.369116 -12.49566 -11.64438 -11.53033 -1.318672 -3.740091 -16.79364 -13.93131 -10.14329 -2.927826 -4.070711 
  34.65446 -28.44256 -3.334675 -7.555059 0.6039535 7.561821 1.736155 0.4472353 2.238469 1.810167 7.918336 17.30954 7.318905 
  36.02549 -24.71712 5.045408 5.568371 11.95644 4.986396 3.402424 -3.740091 -3.909534 -15.34715 -8.65542 0.3246078 6.278472 ]
adg04_sr169_trn-start  [
  39.62196 -26.18534 -15.09298 -19.90806 -15.91415 -20.86475 -14.14965 0.8665233 -1.013698 -16.98643 -20.47561 -11.85829 0.2310829 
  40.08121 -21.26787 -9.686052 -12.48463 -14.7041 -22.89527 -24.38042 -8.09708 -2.147003 -16.27318 -13.06755 -6.246067 0.7355871 
  38.24421 -19.50739 -4.411005 -13.68843 -15.71248 -22.28611 -8.829645 2.530035 -4.347309 -15.98788 -14.17779 2.632685 1.240093 
  38.70346 -21.65909 -5.202263 -13.68843 -10.47999 -14.97622 1.523424 4.609426 -5.604626 -16.98643 -11.12463 6.560691 -2.66982 
  38.70346 -20.09422 -0.3228445 -14.08969 -10.47999 -18.83422 -4.94195 -1.031705 -9.533742 -11.99367 -7.238798 12.90593 2.691433 ]
LOG (extract-rows:main():extract-rows.cc:149) Processed 5 segments successfully; errors on 0

==== Grammar ====
This generates a random sentence from the grammar (language model).  It's not very constrained.

make random_utterance
/projects/speech/sys/kaldi-trunk/tools/openfst/bin/fstrandgen data/lang/G.fst tmp/rand.fst
/projects/speech/sys/kaldi-trunk/tools/openfst/bin/fstprint --isymbols=data/lang/words.txt --osymbols=data/lang/words.txt tmp/rand.fst 
0	1	POLLACK+S	POLLACK+S
1	2	BEAM	BEAM
2	3	AND	AND
3	4	AJAX+S	AJAX+S
4	5	POSITIONS	POSITIONS
5	6	FROM	FROM
6	7	SIBERIAN	SIBERIAN
7	8	SEA	SEA
8	9	TACAN	TACAN
9	10	CARRIER	CARRIER
10	11	WASN+T	WASN+T
11	12	DOWNGRADED	DOWNGRADED
12	13	SEVENTH	SEVENTH
13	14	HAVE	HAVE
14	15	<eps>	<eps>
15

====== Command line IO =========
See http://kaldi.sourceforge.net/io_tut.html.

* Matrix
echo '[ 0 1 ; 3 4 ]' | copy-matrix - - > foo.m

copy-matrix --binary=false foo.m - 2>/dev/null
 [
  0 1 
  3 4 ]

Piping IO specifiers
copy-matrix 'echo [ 0 1 ]|' '|copy-matrix --binary=false - -' 2>/dev/null
 [
  0 1 ]

--> Need similar examples for tables.


======= Alignment =======
This command is from /projects/speech/sys/kaldi-trunk/egs/rm/s5/exp/mono/log/align.38.1.log.

gmm-align-compiled --transition-scale=1.0 --acoustic-scale=0.1 --self-loop-scale=0.1 --beam=10 --retry-beam=40 --careful=false 'gmm-boost-silence --boost=1.0 1 exp/mono/38.mdl - |' 'ark:gunzip -c exp/mono/fsts.1.gz|' 'ark,s,cs:apply-cmvn  --utt2spk=ark:data/train.1k/split8/1/utt2spk scp:data/train.1k/split8/1/cmvn.scp scp:data/train.1k/split8/1/feats.scp ark:- | add-deltas ark:- ark:- |' 'ark,t:|gzip -c >exp/mono/ali.1.gz'

These are the arguments for gmm-align-compiled.

Align features given [GMM-based] models.
Usage:   gmm-align-compiled [options] model-in graphs-rspecifier feature-rspecifier alignments-wspecifier [scores-wspecifier]
e.g.: 
 gmm-align-compiled 1.mdl ark:graphs.fsts scp:train.scp ark:1.ali
or:
 compile-train-graphs tree 1.mdl lex.fst ark:train.tra b, ark:- | \
   gmm-align-compiled 1.mdl ark:- scp:train.scp t, ark:1.ali

Options:
  --acoustic-scale            : Scaling factor for acoustic likelihoods (float, default = 1)
  --beam                      : Decoding beam used in alignment (float, default = 200)
  --careful                   : If true, do 'careful' alignment, which is better at detecting alignment failure (involves loop to start of decoding graph). (bool, default = false)
  --retry-beam                : Decoding beam for second try at alignment (float, default = 0)
  --self-loop-scale           : Scale of self-loop versus non-self-loop log probs [relative to acoustics] (float, default = 1)
  --transition-scale          : Transition-probability scale [relative to acoustics] (float, default = 1)

So the executed command uses these.

model-in
graphs-rspecifier
feature-rspecifier
alignments-wspecifier


gmm-align-compiled
  --transition-scale=1.0
  --acoustic-scale=0.1
  --self-loop-scale=0.1
  --beam=10
  --retry-beam=40
  --careful=false
  (model-in) 'gmm-boost-silence --boost=1.0 1 exp/mono/38.mdl - |'
  (graphs-specifier) 'ark:gunzip -c exp/mono/fsts.1.gz|'
  (feature-specifier) 'ark,s,cs:apply-cmvn  --utt2spk=ark:data/train.1k/split8/1/utt2spk scp:data/train.1k/split8/1/cmvn.scp scp:data/train.1k/split8/1/feats.scp ark:- | add-deltas ark:- ark:- |'
  (alignment-specifier) 'ark,t:|gzip -c >exp/mono/ali.1.gz'


* Printing

exp/mono/ali.1a is an unzipped alignment file.
Assume exp/mono/final.mdl is the corresponding model.

This converts the alignment for each utterance to a sequence of pdf ids.

bali-to-pdf exp/mono/final.mdl ark:exp/mono/ali.1a ark,t:- 
adg04_sr249_trn 0 0 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 2 4 137 137 138 138 139 139 11 11 12 12 13 13 119 119 119 120 121 121 121 77 77 78 78 79 79 79 79 79 79 56 57 57 57 57 58 58 101 101 102 102 103 103 20 20 20 21 22 26 27 27 28 28 28 28 28 68 69 70 70 70 83 83 83 83 83 83 83 83 84 85 85 85 85 20 21 22 22 41 41 42 42 43 43 43 43 71 71 71 71 71 71 71 71 71 71 71 72 72 72 73 143 143 143 144 144 144 145 145 145 145 145 32 32 33 33 33 33 34 20 20 21 21 22 143 144 145 113 114 114 114 114 114 114 114 114 114 114 115 115 115 115 53 53 53 53 53 53 53 53 54 54 55 86 87 87 87 88 88 20 21 22 89 90 90 91 91 91 65 65 66 66 66 66 66 66 67 67 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 9 9 10 134 135 135 136 136 136 136 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 4 
adg04_sr409_trn 0 0 0 0 2 2 2 2 2 2 4 4 4 83 84 84 85 85 85 68 69 70 70 70 110 110 110 110 110 110 110 110 110 110 111 111 112 119 120 120 121 0 3 3 3 4 4 14 14 14 14 15 15 16 83 83 83 83 83 83 83 83 83 84 84 85 85 77 77 77 78 78 78 79 79 79 79 79 107 107 107 108 108 108 109 109 131 131 131 131 131 132 133 133 143 143 143 143 144 144 144 144 145 145 53 53 53 53 53 53 53 53 53 54 54 55 55 55 143 143 144 144 144 144 144 144 145 145 0 3 3 4 4 8 9 9 9 10 89 89 89 90 90 90 90 90 91 38 39 40 44 44 44 45 46 107 108 109 109 59 59 59 59 60 60 60 60 60 60 60 60 60 61 61 83 84 84 85 71 71 71 71 71 71 72 72 72 72 73 119 120 120 121 121 23 23 23 23 24 25 25 25 25 25 25 32 32 32 33 33 34 34 44 45 46 89 89 90 90 91 91 20 21 22 59 59 59 59 60 60 61 61 20 20 21 22 77 77 77 78 78 79 79 79 79 79 79 79 56 56 56 56 57 57 57 57 57 57 58 113 113 113 113 114 114 114 114 114 114 114 115 115 115 115 115 50 50 50 50 51 51 51 51 51 51 51 51 51 51 51 51 52 52 52 143 143 144 144 144 144 144 144 145 145 145 145 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4

Parts like this have a sequential structure, suggesting tritophones.
143 143 144 144 144 144 144 144 145 145 145 145

======== Topology  data/lang/topo ========
<Topology>
<TopologyEntry>
<ForPhones>

</ForPhones>
<State> 0 <PdfClass> 0 <Transition> 0 0.75 <Transition> 1 0.25 </State>
<State> 1 <PdfClass> 1 <Transition> 1 0.75 <Transition> 2 0.25 </State>
<State> 2 <PdfClass> 2 <Transition> 2 0.75 <Transition> 3 0.25 </State>
<State> 3 </State>
</TopologyEntry>
<TopologyEntry>
<ForPhones>
1 2 3 4 5
</ForPhones>
<State> 0 <PdfClass> 0 <Transition> 0 0.25 <Transition> 1 0.25 <Transition> 2 0.25 <Transition> 3 0.25 </State>
<State> 1 <PdfClass> 1 <Transition> 1 0.25 <Transition> 2 0.25 <Transition> 3 0.25 <Transition> 4 0.25 </State>
<State> 2 <PdfClass> 2 <Transition> 1 0.25 <Transition> 2 0.25 <Transition> 3 0.25 <Transition> 4 0.25 </State>
<State> 3 <PdfClass> 3 <Transition> 1 0.25 <Transition> 2 0.25 <Transition> 3 0.25 <Transition> 4 0.25 </State>
<State> 4 <PdfClass> 4 <Transition> 4 0.75 <Transition> 5 0.25 </State>
<State> 5 </State>
</TopologyEntry>
</Topology>


* 1..5 are the silence phones.
paste data/lang/phones/silence.int  data/lang/phones/silence.txt 
1	sil
2	sil_B
3	sil_E
4	sil_I
5	sil_S

* 6..193 are the normal phones.
paste data/lang/phones/nonsilence.int  data/lang/phones/nonsilence.txt | head -5
6	aa_B
7	aa_E
8	aa_I
9	aa_S
10	ae_B

paste data/lang/phones/nonsilence.int  data/lang/phones/nonsilence.txt | tail -5
189	y_S
190	z_B
191	z_E
192	z_I
193	z_S

These are positional phones.  The numbering agrees with the topology.  Elsewhere we have this info about shared parameters.
head data/lang/phones/roots.txt
shared split sil sil_B sil_E sil_I sil_S
shared split aa_B aa_E aa_I aa_S
shared split ae_B ae_E ae_I ae_S
shared split ah_B ah_E ah_I ah_S
shared split ao_B ao_E ao_I ao_S
shared split aw_B aw_E aw_I aw_S
shared split ax_B ax_E ax_I ax_S
shared split ay_B ay_E ay_I ay_S
shared split b_B b_E b_I b_S
shared split ch_B ch_E ch_I ch_S

What is <PdfClass>?

* Final model
copy-transition-model --binary=false final.mdl final.mdl.txt
<LogProbs> contains 1794 numbers.

====== align-to-pdf ========
This is the command for compiling align-to-pdf2 that is triggered by make in src.

g++ -msse -msse2 -Wall -I.. -pthread -DKALDI_DOUBLEPRECISION=0 -DHAVE_POSIX_MEMALIGN -Wno-sign-compare -Winit-self -DHAVE_EXECINFO_H=1 -DHAVE_CXXABI_H -DHAVE_CLAPACK -I/projects/speech/sys/kaldi-trunk/tools/openfst/include -Wno-sign-compare -g  -Wno-mismatched-tags -stdlib=libstdc++  -g -stdlib=libstdc++  ali-to-pdf2.cc ../lm/kaldi-lm.a ../decoder/kaldi-decoder.a ../lat/kaldi-lat.a ../hmm/kaldi-hmm.a ../transform/kaldi-transform.a ../gmm/kaldi-gmm.a ../tree/kaldi-tree.a ../matrix/kaldi-matrix.a ../util/kaldi-util.a ../base/kaldi-base.a ../thread/kaldi-thread.a   /projects/speech/sys/kaldi-trunk/tools/openfst/lib/libfst.a -ldl -lm -lpthread -framework Accelerate -o ali-to-pdf2

========= show-alignments ===========
make -f MakefileDemo show-alignments

wem05_st1851_trn  [ 3 12 10 10 10 10 10 10 10 18 ] [ 308 307 310 312 311 ] [ 224 226 228 227 ] [ 944 943 943 943 943 946 945 948 947 947 ] [ 872 871 874 873 873 873 873 873 873 876 ] [ 728 730 729 729 732 731 731 731 ] [ 506 505 505 508 507
wem05_st1851_trn  sil                              d_B                     ax_I                s_I                                         p_I                                         l_I                                 ey_E                 

wem05_st2202_trn  [ 3 12 10 10 10 10 10 10 18 17 17 17 ] [ 92 91 91 91 94 96 95 95 ] [ 914 916 918 ] [ 1148 1150 1149 1149 1149 1149 1149 1149 1149 1149 1152 1151 1151 1151 ] [ 416 415 415 415 415 415 415 415 415 418 420 ] [ 776 778 780 ] [
wem05_st2202_trn  sil                                    aa_B                        r_E             w_B                                                                       eh_I                                            n_I             z

egrep wem05_st1851_trn data/train/text
wem05_st1851_trn DISPLAY A CHART OF CANADA WITH DMDS SWITCHES SET TO THEIR DEFAULTS
egrep wem05_st1851_trn Data/ali.8 | cut -c1-200
wem05_st1851_trn 3 12 10 10 10 10 10 10 10 18 308 307 310 312 311 224 226 228 227 944 943 943 943 943 946 945 948 947 947 872 871 874 873 873 873 873 873 873 876 728 730 729 729 732 731 731 731 506 50

The first word is DISPLAY.
